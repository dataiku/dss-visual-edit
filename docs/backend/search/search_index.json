{
    "config": {
        "lang": [
            "en"
        ],
        "separator": "[\\s\\-]+",
        "pipeline": [
            "stopWordFilter"
        ]
    },
    "docs": [
        {
            "location": "",
            "title": "Home",
            "text": "<p>This is the technical documentation for the backend of the Visual Edit plugin. Return to the main documentation.</p>"
        },
        {
            "location": "#DataEditor.DataEditor",
            "title": "<code>DataEditor</code>",
            "text": "<p>This class provides CRUD methods to make a dataset editable using the Event Sourcing pattern: edits are stored in a separate dataset called the editlog. The source dataset is never changed. Both the source dataset and the editlog are used to compute the edited state.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.create_row",
            "title": "<code>create_row(primary_keys, column_values)</code>",
            "text": "<p>Creates a new row.</p> <p>Parameters:</p> Name Type Description Default <code>primary_keys</code> <code>dict</code> <p>A dictionary containing values for all primary keys. The set of values must be unique. Example: {\"id\": \"My new unique id\"}</p> required <code>column_values</code> <code>dict</code> <p>A dictionary containing values for all other columns. Example: {\"col1\": \"hey\", \"col2\": 42, \"col3\": True}</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A message indicating that the row was created.</p> Note <p>This method does not implement data validation or check that the values are allowed for the specified columns.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.delete_row",
            "title": "<code>delete_row(primary_keys)</code>",
            "text": "<p>Deletes a row identified by the given primary key(s).</p> <p>Parameters:</p> Name Type Description Default <code>primary_keys</code> <code>dict</code> <p>A dictionary containing the primary key(s) value(s) that identify the row to delete.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>A message indicating that the row was deleted.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.empty_editlog",
            "title": "<code>empty_editlog()</code>",
            "text": "<p>Writes an empty dataframe to the editlog dataset.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.get_edited_cells_df",
            "title": "<code>get_edited_cells_df()</code>",
            "text": "<p>Returns a pandas DataFrame with the edited cells.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: A DataFrame containing only the edited rows and columns.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.get_edited_cells_df_indexed",
            "title": "<code>get_edited_cells_df_indexed()</code>",
            "text": "<p>Returns a pandas DataFrame with the edited cells, indexed by the primary keys.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame A DataFrame containing only the edited rows and columns, indexed by the primary keys.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.get_edited_df",
            "title": "<code>get_edited_df()</code>",
            "text": "<p>Returns the original dataframe with any edited values.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: A DataFrame with the original data and any edited values.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.get_edited_df_indexed",
            "title": "<code>get_edited_df_indexed()</code>",
            "text": "<p>Returns the original dataframe with any edited values, indexed by the primary keys.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: A DataFrame with the original data and any edited values, indexed by the primary keys.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.get_editlog_df",
            "title": "<code>get_editlog_df()</code>",
            "text": "<p>Returns the contents of the editlog.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: A DataFrame containing the editlog.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.get_original_df",
            "title": "<code>get_original_df()</code>",
            "text": "<p>Returns the original data without any edits.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pandas.DataFrame: The original data.</p>"
        },
        {
            "location": "#DataEditor.DataEditor.get_row",
            "title": "<code>get_row(primary_keys)</code>",
            "text": "<p>Retrieve a single row from the dataset that was created, updated or deleted.</p> <p>Parameters:</p> Name Type Description Default <code>primary_keys</code> <code>dict</code> <p>A dictionary containing values for all primary keys defined in the initial Visual Edit setup. The set of values must be unique. Example: {     \"key1\": \"cat\",     \"key2\": \"2022-12-21\", }</p> required <p>Returns:</p> Type Description <p>pandas.DataFrame: A single-row dataframe containing the values of editable columns, indexed by the primary keys. Example:</p> <pre><code>key1        key2        editable_column1    editable_column2\n\"cat\"       2022-12-21  \"hello\"             42\n</code></pre> Notes <ul> <li>The current implementation loads all edited rows in memory, then filters the rows that match the provided primary key values.</li> <li>This method does not read rows that were not edited, and it does not read columns which are not editable.<ul> <li>If some rows of the dataset were created, then by definition all columns are editable (including primary keys).</li> <li>If no row was created, editable columns are those defined in the initial Visual Edit setup.</li> </ul> </li> </ul>"
        },
        {
            "location": "#DataEditor.DataEditor.update_row",
            "title": "<code>update_row(primary_keys, column, value)</code>",
            "text": "<p>Updates a row.</p> <p>Parameters:</p> Name Type Description Default <code>primary_keys</code> <code>dict</code> <p>A dictionary containing primary key(s) value(s) that identify the row to update.</p> required <code>column</code> <code>str</code> <p>The name of the column to update.</p> required <code>value</code> <code>str</code> <p>The value to set for the cell identified by key and column.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A message indicating that the row was edited.</p> Note <p>This method doesn't implement data validation. It doesn't check that the value is allowed for the specified column.</p>"
        }
    ]
}